def git_branch = '*/master'
def git_url = 'https://github.com/dreamjser/h5-react-template.git'
def image_name = 'image_react_app'
def container_name = 'container_react_app'

node {
  stage('拉取代码') {
    checkout([$class: 'GitSCM', branches: [[name: "${git_branch}"]], extensions: [], userRemoteConfigs: [[url: "${git_url}"]]])
    env.Tag = sh (script: 'git log -1 --pretty=%h', returnStdout: true).trim()
  }

  stage('代码构建') {
    env.NODEJS_HOME = "${tool 'nodejs'}"
    env.PATH="${env.NODEJS_HOME}/bin:${env.PATH}"
    env.imageId = sh (script: "docker image ls | grep ${image_name} | awk '{print \$2}'", returnStdout: true).trim()
    sh """
      npm i pnpm -g
      pnpm i
      npm run build:s-test
    """
  }
  stage('容器构建') {
    sh """
      docker build -t ${image_name}:${Tag} -f ./deploy/Dockerfile .
    """

    try{
      sh """
        docker stop ${container_name}
        docker rm ${container_name}
        echo '已删除容器${container_name}'
      """
    }catch(exc) {
      echo '无容器删除'
    }


    sh """
      echo 'imageId: ${imageId}'
      echo 'Tag: ${Tag}'
      if [ "${imageId}" != "${Tag}" ] && [ "${imageId}" ]
      then
        docker rmi ${image_name}:${imageId}
        echo '已删除镜像${image_name}:${imageId}'
      fi

      docker run -itd -p 8021:8021 --name ${container_name} ${image_name}:${Tag}
    """
  }
}
